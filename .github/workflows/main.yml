name: ci-checks

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: '30 3 1 */1 *'  # At 03:30 on the 1st of every month
  workflow_dispatch:

jobs:
  backend:
    name: backend
    runs-on: ubuntu-24.04

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: hawc
          POSTGRES_PASSWORD: password
          POSTGRES_DB: hawc
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
        - 5432:5432
      redis:
        image: redis:6-alpine
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
        - 6379:6379

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        architecture: 'x64'
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        cache-dependency-glob: "**/pyproject.toml"
    - name: install
      run: |
        uv pip install --system -e ".[dev,docs]"
        uv pip install --system -e client
    - name: lint-py
      run: |
        poe lint-py
    - name: lint-html
      run: |
        poe lint-html
    - name: test
      env:
        DJANGO_DB_NAME: hawc
        DJANGO_DB_USER: hawc
        DJANGO_DB_PW: password
        DJANGO_DB_HOST: localhost
        DJANGO_CACHE_LOCATION: redis://localhost:6379/0
        PUBMED_API_KEY: ${{ secrets.PUBMED_API_KEY }}
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          export "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib"
        fi
        coverage run -m pytest -v --block-network --allowed-hosts=127.0.0.1,::1 --record-mode=none
        echo "# Python coverage report" >> $GITHUB_STEP_SUMMARY
        coverage report --format=markdown -i >> $GITHUB_STEP_SUMMARY || true
        coverage html -d coverage -i
    - name: loc
      run: |
        sudo apt-get install -y cloc
        echo "# Lines of code report" >> $GITHUB_STEP_SUMMARY
        poe loc >> $GITHUB_STEP_SUMMARY
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: coverage
        path: coverage
        retention-days: 7

  frontend:
    name: frontend
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 22
        cache: 'yarn'
        cache-dependency-path: 'frontend/yarn.lock'
    - name: install
      run: |
        yarn --cwd ./frontend install --frozen-lockfile
    - name: lint
      run: |
        yarn --cwd ./frontend run lint
    - name: test
      run: |
        yarn --cwd ./frontend run test
    - name: build for integration tests
      run: |
        yarn --cwd ./frontend run build
    - name: Upload js build
      uses: actions/upload-artifact@v4
      with:
        name: js
        path: hawc/static/bundles/
        retention-days: 1

  integration:
    name: integration
    needs: [frontend]
    runs-on: ubuntu-24.04

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: hawc
          POSTGRES_PASSWORD: password
          POSTGRES_DB: hawc
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
        - 5432:5432

    env:
      DJANGO_DB_HOST: localhost
      DJANGO_DB_NAME: hawc
      DJANGO_DB_PW: password
      DJANGO_DB_USER: hawc
      INTEGRATION_TESTS: 1
      NO_VITE_DEV: 1
      LIVESERVER_HOST: localhost
      LIVESERVER_PORT: 8000
      PUBMED_API_KEY: ${{ secrets.PUBMED_API_KEY }}

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        architecture: 'x64'
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        cache-dependency-glob: "**/pyproject.toml"
    - name: Download js build
      uses: actions/download-artifact@v4
      with:
        name: js
        path: hawc/static/bundles/
    - name: install hawc
      run: |
        uv sync --all-extras --python-preference=only-system
        uv run playwright install --with-deps chromium
    # https://github.community/t/how-to-retry-a-failed-step-in-github-actions-workflow/125880
    - name: run integration tests
      id: test
      continue-on-error: true
      run: |
        uv run py.test -v --block-network --allowed-hosts=127.0.0.1,::1 tests/integration/
    - name: run integration tests (retry)
      if: steps.test.outcome=='failure'
      id: retry
      continue-on-error: true
      run: |
        uv run py.test -v --block-network --allowed-hosts=127.0.0.1,::1 --lf tests/integration/
    - name: set status
      if: always()
      run: |
        if ${{ steps.test.outcome=='success' || steps.retry.outcome=='success' }}; then
          echo success!
        else
          exit 1
        fi
    - name: Build wheels
      run: |
        # activate environment so we can build the client package too using flit
        source .venv/bin/activate
        python manage.py set_git_commit
        flit build --format wheel
        cd client && flit build --format wheel && cd ..
        cp client/dist/*.whl dist
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheel
        path: dist/*.whl
        if-no-files-found: ignore
        retention-days: 7
