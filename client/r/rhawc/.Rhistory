View(test)
rob_data(100500047)
rob_full_data(100500047)
ani_data(100500047)
ani_data_summary(100500047)
epi_data(100500047)
epimeta_data(100500047)
invitro_data(100500047)
visual_list(100500047)
lit_import_hero(100500047, "an ok title", "an ok description", list(1, 2, 3, 4))
getwd()
test_csv <- read.csv("C:/Users/mlein/Documents/Python/hero_id_import_test.csv")
lit_import_reference_tags(100500047, test_csv)
root_url
# example definition
HawcClient <- function(baseUrl){
# local environment variables
thisEnv <- environment()
# persistent "state"
baseUrl <- baseUrl
token <- ""
checkIsAuthenticated <- function(){
if((nchar(get("token", thisEnv))==0)){
stop('Authentication required')
}
}
# the methods which will be exposed by the client
me <- list(
authenticate = function(username, password){
assign("token", "abcd", thisEnv)
},
doSomethingAuthenticated = function(){
checkIsAuthenticated()
return(TRUE)
}
)
# magic to package things up and return what we want
assign('this', me, envir=thisEnv)
class(me) <- append(class(me), "HawcClient")
return(me)
}
client = HawcClient("https://hawcproject.org")
client$doSomethingAuthenticated()
client = HawcClient("https://hawcproject.org")
client$authenticate()
client$doSomethingAuthenticated()
client$doSomethingAuthenticated()
client = HawcClient("https://hawcproject.org")
client$doSomethingAuthenticated()
# example definition
HawcClient <- function(baseUrl){
# local environment variables
thisEnv <- environment()
# persistent "state"
baseUrl <- baseUrl
token <- ""
checkIsAuthenticated <- function(){
if((nchar(get("token", thisEnv))==0)){
stop('Authentication required')
}
}
# the methods which will be exposed by the client
me <- list(
authenticate = function(username, password){
response = POST(paste0(root_url, "/user/api/token-auth/"),
body = list(username = username, password = password), encode = "json")
token = (content(response))[[1]]
assign("token", token, thisEnv)
},
doSomethingAuthenticated = function(){
checkIsAuthenticated()
return(TRUE)
}
)
# magic to package things up and return what we want
assign('this', me, envir=thisEnv)
class(me) <- append(class(me), "HawcClient")
return(me)
}
client = HawcClient("https://hawcproject.org")
client$doSomethingAuthenticated()
client = HawcClient("https://hawcproject.org")
client$authenticate()
# example definition
HawcClient <- function(baseUrl){
# local environment variables
thisEnv <- environment()
# persistent "state"
root_url <- baseUrl
token <- ""
checkIsAuthenticated <- function(){
if((nchar(get("token", thisEnv))==0)){
stop('Authentication required')
}
}
# the methods which will be exposed by the client
me <- list(
authenticate = function(username, password){
response = POST(paste0(root_url, "/user/api/token-auth/"),
body = list(username = username, password = password), encode = "json")
token = (content(response))[[1]]
assign("token", token, thisEnv)
},
doSomethingAuthenticated = function(){
checkIsAuthenticated()
return(TRUE)
}
)
# magic to package things up and return what we want
assign('this', me, envir=thisEnv)
class(me) <- append(class(me), "HawcClient")
return(me)
}
client = HawcClient("https://hawcproject.org")
client$doSomethingAuthenticated()
client = HawcClient("https://hawcproject.org")
client$authenticate()
client$authenticate("webmaster@hawcproject.org", "password")
client$doSomethingAuthenticated()
client = HawcClient("https://hawcproject.org")
client$doSomethingAuthenticated()
# example definition
HawcClient <- function(baseUrl){
# local environment variables
thisEnv <- environment()
# persistent "state"
root_url <- baseUrl
token <- ""
checkIsAuthenticated <- function(){
if((nchar(get("token", thisEnv))==0)){
stop('Authentication required')
}
}
# the methods which will be exposed by the client
me <- list(
authenticate = function(username, password){
response = POST(paste0(root_url, "/user/api/token-auth/"),
body = list(username = username, password = password), encode = "json")
token = (content(response))[[1]]
assign("token", token, thisEnv)
},
doSomethingAuthenticated = function(){
checkIsAuthenticated()
return(TRUE)
},
get_ <- function(url) {
response = GET(url, add_headers(Authorization=paste('Token', token,sep=' '),
'Content-Type'="application/json"))
if (response$status_code >= 400 & response$status_code < 500) {
stop("An exception occured in the HAWC client module") }
else if (response$status_code == 500) {
stop("An exception occured on the HAWC server") }
else {
response.list = content(response)
response.list = lapply(response.list, lapply, function(x)ifelse(is.null(x), NA, x))
response.df = rbind.fill(lapply(response.list, as.data.frame))
return(response.df)
}
},
lit_tags <- function(assessment_id) {
url = paste0(root_url, "/lit/api/assessment/", assessment_id, "/tags/")
response = get_(url)
return(response)
}
)
# magic to package things up and return what we want
assign('this', me, envir=thisEnv)
class(me) <- append(class(me), "HawcClient")
return(me)
}
client = HawcClient("https://hawcproject.org")
client$authenticate("webmaster@hackproject.org")
client$authenticate("webmaster@hackproject.org", "password")
client$doSomethingAuthenticated()
# example definition
HawcClient <- function(baseUrl){
# local environment variables
thisEnv <- environment()
# persistent "state"
root_url <- baseUrl
token <- ""
checkIsAuthenticated <- function(){
if((nchar(get("token", thisEnv))==0)){
stop('Authentication required')
}
}
# the methods which will be exposed by the client
me <- list(
authenticate = function(username, password){
response = POST(paste0(root_url, "/user/api/token-auth/"),
body = list(username = username, password = password), encode = "json")
token = (content(response))[[1]]
assign("token", token, thisEnv)
},
doSomethingAuthenticated = function(){
checkIsAuthenticated()
return(TRUE)
},
get_ = function(url) {
response = GET(url, add_headers(Authorization=paste('Token', token,sep=' '),
'Content-Type'="application/json"))
if (response$status_code >= 400 & response$status_code < 500) {
stop("An exception occured in the HAWC client module") }
else if (response$status_code == 500) {
stop("An exception occured on the HAWC server") }
else {
response.list = content(response)
response.list = lapply(response.list, lapply, function(x)ifelse(is.null(x), NA, x))
response.df = rbind.fill(lapply(response.list, as.data.frame))
return(response.df)
}
},
lit_tags = function(assessment_id) {
url = paste0(root_url, "/lit/api/assessment/", assessment_id, "/tags/")
response = get_(url)
return(response)
}
)
# magic to package things up and return what we want
assign('this', me, envir=thisEnv)
class(me) <- append(class(me), "HawcClient")
return(me)
}
client = HawcClient("https://hawcproject.org")
client$authenticate("webmaster@hackproject.org", "password")
client$doSomethingAuthenticated()
client$get_()
client$lit_tags()
client$lit_tags(100500047)
# example definition
HawcClient <- function(baseUrl){
# local environment variables
thisEnv <- environment()
# persistent "state"
root_url <- baseUrl
token <- ""
checkIsAuthenticated <- function(){
if((nchar(get("token", thisEnv))==0)){
stop('Authentication required')
}
}
get_ = function(url) {
response = GET(url, add_headers(Authorization=paste('Token', token,sep=' '),
'Content-Type'="application/json"))
if (response$status_code >= 400 & response$status_code < 500) {
stop("An exception occured in the HAWC client module") }
else if (response$status_code == 500) {
stop("An exception occured on the HAWC server") }
else {
response.list = content(response)
response.list = lapply(response.list, lapply, function(x)ifelse(is.null(x), NA, x))
response.df = rbind.fill(lapply(response.list, as.data.frame))
return(response.df)
}
},
# the methods which will be exposed by the client
me <- list(
authenticate = function(username, password){
response = POST(paste0(root_url, "/user/api/token-auth/"),
body = list(username = username, password = password), encode = "json")
token = (content(response))[[1]]
assign("token", token, thisEnv)
},
doSomethingAuthenticated = function(){
checkIsAuthenticated()
return(TRUE)
},
lit_tags = function(assessment_id) {
url = paste0(root_url, "/lit/api/assessment/", assessment_id, "/tags/")
response = get_(url)
return(response)
}
)
# magic to package things up and return what we want
assign('this', me, envir=thisEnv)
class(me) <- append(class(me), "HawcClient")
return(me)
}
# example definition
HawcClient <- function(baseUrl){
# example definition
HawcClient <- function(baseUrl){
# local environment variables
thisEnv <- environment()
# persistent "state"
root_url <- baseUrl
token <- ""
checkIsAuthenticated <- function(){
if((nchar(get("token", thisEnv))==0)){
stop('Authentication required')
}
}
get_ = function(url) {
response = GET(url, add_headers(Authorization=paste('Token', token,sep=' '),
'Content-Type'="application/json"))
if (response$status_code >= 400 & response$status_code < 500) {
stop("An exception occured in the HAWC client module") }
else if (response$status_code == 500) {
stop("An exception occured on the HAWC server") }
else {
response.list = content(response)
response.list = lapply(response.list, lapply, function(x)ifelse(is.null(x), NA, x))
response.df = rbind.fill(lapply(response.list, as.data.frame))
return(response.df)
}
}
# the methods which will be exposed by the client
me <- list(
authenticate = function(username, password){
response = POST(paste0(root_url, "/user/api/token-auth/"),
body = list(username = username, password = password), encode = "json")
token = (content(response))[[1]]
assign("token", token, thisEnv)
},
doSomethingAuthenticated = function(){
checkIsAuthenticated()
return(TRUE)
},
lit_tags = function(assessment_id) {
url = paste0(root_url, "/lit/api/assessment/", assessment_id, "/tags/")
response = get_(url)
return(response)
}
)
# magic to package things up and return what we want
assign('this', me, envir=thisEnv)
class(me) <- append(class(me), "HawcClient")
return(me)
}
client = HawcClient("https://hawcproject.org")
# example definition
HawcClient <- function(baseUrl){
# local environment variables
thisEnv <- environment()
# persistent "state"
root_url <- baseUrl
token <- ""
checkIsAuthenticated <- function(){
if((nchar(get("token", thisEnv))==0)){
stop('Authentication required')
}
}
get_ = function(url) {
response = GET(url, add_headers(Authorization=paste('Token', token,sep=' '),
'Content-Type'="application/json"))
if (response$status_code >= 400 & response$status_code < 500) {
stop("An exception occured in the HAWC client module") }
else if (response$status_code == 500) {
stop("An exception occured on the HAWC server") }
else {
response.list = content(response)
response.list = lapply(response.list, lapply, function(x)ifelse(is.null(x), NA, x))
response.df = rbind.fill(lapply(response.list, as.data.frame))
return(response.df) }
}
# the methods which will be exposed by the client
me <- list(
authenticate = function(username, password){
response = POST(paste0(root_url, "/user/api/token-auth/"),
body = list(username = username, password = password), encode = "json")
token = (content(response))[[1]]
assign("token", token, thisEnv)
},
doSomethingAuthenticated = function(){
checkIsAuthenticated()
return(TRUE)
},
lit_tags = function(assessment_id) {
url = paste0(root_url, "/lit/api/assessment/", assessment_id, "/tags/")
response = get_(url)
return(response)
}
)
# magic to package things up and return what we want
assign('this', me, envir=thisEnv)
class(me) <- append(class(me), "HawcClient")
return(me)
}
client = HawcClient("https://hawcproject.org")
client$authenticate("webmaster@hackproject.org", "password")
client$doSomethingAuthenticated()
client$lit_tags(100500047)
<- ""
token <- ""
authenticate = function(username, password){
response = POST(paste0(root_url, "/user/api/token-auth/"),
body = list(username = username, password = password), encode = "json")
token = (content(response))[[1]]
assign("token", token, thisEnv)
},
doSomethingAuthenticated = function(){
checkIsAuthenticated()
return(TRUE)
},
lit_tags = function(assessment_id) {
url = paste0(root_url, "/lit/api/assessment/", assessment_id, "/tags/")
response = get_(url)
return(response)
}
environment
environment()
# local environment variables
thisEnv <- environment()
View(thisEnv)
View(thisEnv)
environment()
?assign
# example definition
HawcClient <- function(baseUrl){
# local environment variables
thisEnv <- environment()
# persistent "state"
root_url <- baseUrl
# token <- ""
checkIsAuthenticated <- function(){
if((nchar(get("token", thisEnv))==0)){
stop('Authentication required')
}
}
get_ = function(url) {
response = GET(url, add_headers(Authorization=paste('Token', token,sep=' '),
'Content-Type'="application/json"))
if (response$status_code >= 400 & response$status_code < 500) {
stop("An exception occured in the HAWC client module") }
else if (response$status_code == 500) {
stop("An exception occured on the HAWC server") }
else {
response.list = content(response)
response.list = lapply(response.list, lapply, function(x)ifelse(is.null(x), NA, x))
response.df = rbind.fill(lapply(response.list, as.data.frame))
return(response.df) }
}
# the methods which will be exposed by the client
me <- list(
authenticate = function(username, password){
response = POST(paste0(root_url, "/user/api/token-auth/"),
body = list(username = username, password = password), encode = "json")
token = (content(response))[[1]]
assign("token", token, thisEnv)
},
doSomethingAuthenticated = function(){
checkIsAuthenticated()
return(TRUE)
},
lit_tags = function(assessment_id) {
url = paste0(root_url, "/lit/api/assessment/", assessment_id, "/tags/")
response = get_(url)
return(response)
}
)
# magic to package things up and return what we want
assign('this', me, envir=thisEnv)
class(me) <- append(class(me), "HawcClient")
return(me)
}
View(thisEnv)
thisEnv[["token"]]
View(thisEnv)
# example definition
HawcClient <- function(baseUrl){
# local environment variables
thisEnv <- environment()
# persistent "state"
root_url <- baseUrl
#   token <- ""
checkIsAuthenticated <- function(){
if((nchar(get("token", thisEnv))==0)){
stop('Authentication required')
}
}
get_ = function(url) {
response = GET(url, add_headers(Authorization=paste('Token', token,sep=' '),
'Content-Type'="application/json"))
if (response$status_code >= 400 & response$status_code < 500) {
stop("An exception occured in the HAWC client module") }
else if (response$status_code == 500) {
stop("An exception occured on the HAWC server") }
else {
response.list = content(response)
response.list = lapply(response.list, lapply, function(x)ifelse(is.null(x), NA, x))
response.df = rbind.fill(lapply(response.list, as.data.frame))
return(response.df) }
}
# the methods which will be exposed by the client
me <- list(
authenticate = function(username, password){
response = POST(paste0(root_url, "/user/api/token-auth/"),
body = list(username = username, password = password), encode = "json")
token = (content(response))[[1]]
assign("token", token, thisEnv)
},
doSomethingAuthenticated = function(){
checkIsAuthenticated()
return(TRUE)
},
lit_tags = function(assessment_id) {
url = paste0(root_url, "/lit/api/assessment/", assessment_id, "/tags/")
response = get_(url)
return(response)
}
)
# magic to package things up and return what we want
assign('this', me, envir=thisEnv)
class(me) <- append(class(me), "HawcClient")
return(me)
}
client$doSomethingAuthenticated()
client$lit_tags(100500047)
client$lit_tags(100500047)
assign("token", token, thisEnv)
client
assign("token", token, thisEnv)
