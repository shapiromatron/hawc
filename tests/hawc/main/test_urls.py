import pytest
from django.contrib.messages.middleware import MessageMiddleware
from django.contrib.sessions.middleware import SessionMiddleware
from django.core.exceptions import PermissionDenied
from django.http import Http404
from django.test import RequestFactory
from django.urls import URLPattern, URLResolver

from hawc.apps.myuser.models import HAWCUser
from hawc.main.urls import urlpatterns

my_list = []


@pytest.fixture
def pattern_params(db):
    return {}


# find a better way of excluding admin patterns;
# have all of them in urlresolver, check for admin name and skip?
# maybe do the same with api
PASS_PATTERNS = [
    "reset_password_confirm",
    "log_object_list",
    "publish-update",
    "assessment-logs",
    "dataset-version",
    "healthcheck-worker",
    "search_detail",
    "search_update",
    "search_delete",
    "search_query",
    "search_tags",
    "search_tags_visual",
    "tables_create",
    "tables_detail",
    "tables_update",
    "tables_delete",
    "visualization_create",
    "visualization_copy",
    "visualization_create_tester",
    "visualization_detail",
    "visualization_update",
    "visualization_delete",
    "dp_detail",
    "dp_update",
    "dp_query-update",
    "dp_file-update",
    "dp_delete",
    "autocomplete",
    "view_on_site",
    "auth_group_history",
    "auth_group_delete",
    "auth_group_change",
    None,
    "sites_site_history",
    "sites_site_delete",
    "sites_site_change",
    None,
    "authtoken_tokenproxy_history",
    "authtoken_tokenproxy_delete",
    "authtoken_tokenproxy_change",
    None,
    "taggit_tag_history",
    "taggit_tag_delete",
    "taggit_tag_change",
    None,
    "myuser_hawcuser_history",
    "myuser_hawcuser_delete",
    "myuser_hawcuser_change",
    None,
    "assessment_assessment_history",
    "assessment_assessment_delete",
    "assessment_assessment_change",
    None,
    "assessment_assessmentdetail_history",
    "assessment_assessmentdetail_delete",
    "assessment_assessmentdetail_change",
    None,
    "assessment_assessmentvalue_history",
    "assessment_assessmentvalue_delete",
    "assessment_assessmentvalue_change",
    None,
    "assessment_attachment_history",
    "assessment_attachment_delete",
    "assessment_attachment_change",
    None,
    "assessment_dataset_history",
    "assessment_dataset_delete",
    "assessment_dataset_change",
    None,
    "assessment_doseunits_history",
    "assessment_doseunits_delete",
    "assessment_doseunits_change",
    None,
    "assessment_species_history",
    "assessment_species_delete",
    "assessment_species_change",
    None,
    "assessment_strain_history",
    "assessment_strain_delete",
    "assessment_strain_change",
    None,
    "assessment_effecttag_history",
    "assessment_effecttag_delete",
    "assessment_effecttag_change",
    None,
    "assessment_timespentediting_history",
    "assessment_timespentediting_delete",
    "assessment_timespentediting_change",
    None,
    "assessment_job_history",
    "assessment_job_delete",
    "assessment_job_change",
    None,
    "assessment_communication_history",
    "assessment_communication_delete",
    "assessment_communication_change",
    None,
    "assessment_log_history",
    "assessment_log_delete",
    "assessment_log_change",
    None,
    "admin_logentry_history",
    "admin_logentry_delete",
    "admin_logentry_change",
    None,
    "contenttypes_contenttype_history",
    "contenttypes_contenttype_delete",
    "contenttypes_contenttype_change",
    None,
    "assessment_blog_history",
    "assessment_blog_delete",
    "assessment_blog_change",
    None,
    "assessment_dsstox_history",
    "assessment_dsstox_delete",
    "assessment_dsstox_change",
    None,
    "assessment_content_history",
    "assessment_content_delete",
    "assessment_content_change",
    None,
    "vocab_term_history",
    "vocab_term_delete",
    "vocab_term_change",
    None,
    "vocab_entity_history",
    "vocab_entity_delete",
    "vocab_entity_change",
    None,
    "lit_literatureassessment_history",
    "lit_literatureassessment_delete",
    "lit_literatureassessment_change",
    None,
    "lit_referencefiltertag_history",
    "lit_referencefiltertag_delete",
    "lit_referencefiltertag_change",
    None,
    "lit_search_history",
    "lit_search_delete",
    "lit_search_change",
    None,
    "lit_identifiers_history",
    "lit_identifiers_delete",
    "lit_identifiers_change",
    None,
    "lit_reference_history",
    "lit_reference_delete",
    "lit_reference_change",
    None,
    "lit_userreferencetag_history",
    "lit_userreferencetag_delete",
    "lit_userreferencetag_change",
    None,
    "riskofbias_riskofbiasdomain_history",
    "riskofbias_riskofbiasdomain_delete",
    "riskofbias_riskofbiasdomain_change",
    None,
    "riskofbias_riskofbiasmetric_history",
    "riskofbias_riskofbiasmetric_delete",
    "riskofbias_riskofbiasmetric_change",
    None,
    "riskofbias_riskofbiasassessment_history",
    "riskofbias_riskofbiasassessment_delete",
    "riskofbias_riskofbiasassessment_change",
    None,
    "riskofbias_riskofbias_history",
    "riskofbias_riskofbias_delete",
    "riskofbias_riskofbias_change",
    None,
    "riskofbias_riskofbiasscore_history",
    "riskofbias_riskofbiasscore_delete",
    "riskofbias_riskofbiasscore_change",
    None,
    "riskofbias_riskofbiasscoreoverrideobject_history",
    "riskofbias_riskofbiasscoreoverrideobject_delete",
    "riskofbias_riskofbiasscoreoverrideobject_change",
    None,
    "study_study_history",
    "study_study_delete",
    "study_study_change",
    None,
    "animal_experiment_history",
    "animal_experiment_delete",
    "animal_experiment_change",
    None,
    "animal_animalgroup_history",
    "animal_animalgroup_delete",
    "animal_animalgroup_change",
    None,
    "animal_dosingregime_history",
    "animal_dosingregime_delete",
    "animal_dosingregime_change",
    None,
    "animal_endpoint_history",
    "animal_endpoint_delete",
    "animal_endpoint_change",
    None,
    "eco_state_history",
    "eco_state_delete",
    "eco_state_change",
    None,
    "eco_vocab_history",
    "eco_vocab_delete",
    "eco_vocab_change",
    None,
    "eco_design_history",
    "eco_design_delete",
    "eco_design_change",
    None,
    "eco_cause_history",
    "eco_cause_delete",
    "eco_cause_change",
    None,
    "eco_effect_history",
    "eco_effect_delete",
    "eco_effect_change",
    None,
    "eco_result_history",
    "eco_result_delete",
    "eco_result_change",
    None,
    "eco_nestedterm_history",
    "eco_nestedterm_delete",
    "eco_nestedterm_change",
    None,
    "epi_criteria_history",
    "epi_criteria_delete",
    "epi_criteria_change",
    None,
    "epi_country_history",
    "epi_country_delete",
    "epi_country_change",
    None,
    "epi_adjustmentfactor_history",
    "epi_adjustmentfactor_delete",
    "epi_adjustmentfactor_change",
    None,
    "epi_ethnicity_history",
    "epi_ethnicity_delete",
    "epi_ethnicity_change",
    None,
    "epi_resultmetric_history",
    "epi_resultmetric_delete",
    "epi_resultmetric_change",
    None,
    "epi_studypopulation_history",
    "epi_studypopulation_delete",
    "epi_studypopulation_change",
    None,
    "epi_outcome_history",
    "epi_outcome_delete",
    "epi_outcome_change",
    None,
    "epi_comparisonset_history",
    "epi_comparisonset_delete",
    "epi_comparisonset_change",
    None,
    "epi_exposure_history",
    "epi_exposure_delete",
    "epi_exposure_change",
    None,
    "epi_groupnumericaldescriptions_history",
    "epi_groupnumericaldescriptions_delete",
    "epi_groupnumericaldescriptions_change",
    None,
    "epi_result_history",
    "epi_result_delete",
    "epi_result_change",
    None,
    "epimeta_metaprotocol_history",
    "epimeta_metaprotocol_delete",
    "epimeta_metaprotocol_change",
    None,
    "epimeta_metaresult_history",
    "epimeta_metaresult_delete",
    "epimeta_metaresult_change",
    None,
    "epimeta_singleresult_history",
    "epimeta_singleresult_delete",
    "epimeta_singleresult_change",
    None,
    "invitro_ivendpointcategory_history",
    "invitro_ivendpointcategory_delete",
    "invitro_ivendpointcategory_change",
    None,
    "invitro_ivchemical_history",
    "invitro_ivchemical_delete",
    "invitro_ivchemical_change",
    None,
    "invitro_ivcelltype_history",
    "invitro_ivcelltype_delete",
    "invitro_ivcelltype_change",
    None,
    "invitro_ivexperiment_history",
    "invitro_ivexperiment_delete",
    "invitro_ivexperiment_change",
    None,
    "invitro_ivendpoint_history",
    "invitro_ivendpoint_delete",
    "invitro_ivendpoint_change",
    None,
    "bmd_assessmentsettings_history",
    "bmd_assessmentsettings_delete",
    "bmd_assessmentsettings_change",
    None,
    "bmd_session_history",
    "bmd_session_delete",
    "bmd_session_change",
    None,
    "summary_visual_history",
    "summary_visual_delete",
    "summary_visual_change",
    None,
    "summary_datapivotupload_history",
    "summary_datapivotupload_delete",
    "summary_datapivotupload_change",
    None,
    "summary_datapivotquery_history",
    "summary_datapivotquery_delete",
    "summary_datapivotquery_change",
    None,
    "summary_summarytext_history",
    "summary_summarytext_delete",
    "summary_summarytext_change",
    None,
    "summary_summarytable_history",
    "summary_summarytable_delete",
    "summary_summarytable_change",
    None,
    "mgmt_task_history",
    "mgmt_task_delete",
    "mgmt_task_change",
    None,
    "materialized_finalriskofbiasscore_history",
    "materialized_finalriskofbiasscore_delete",
    "materialized_finalriskofbiasscore_change",
    None,
    "epiv2_design_history",
    "epiv2_design_delete",
    "epiv2_design_change",
    None,
    "epiv2_adjustmentfactor_history",
    "epiv2_adjustmentfactor_delete",
    "epiv2_adjustmentfactor_change",
    None,
    "epiv2_chemical_history",
    "epiv2_chemical_delete",
    "epiv2_chemical_change",
    None,
    "epiv2_dataextraction_history",
    "epiv2_dataextraction_delete",
    "epiv2_dataextraction_change",
    None,
    "epiv2_exposure_history",
    "epiv2_exposure_delete",
    "epiv2_exposure_change",
    None,
    "epiv2_exposurelevel_history",
    "epiv2_exposurelevel_delete",
    "epiv2_exposurelevel_change",
    None,
    "epiv2_outcome_history",
    "epiv2_outcome_delete",
    "epiv2_outcome_change",
    None,
    "app_list",
    None,
    None,
]


def _smart_pattern_kwargs(pattern):
    kwargs = {}
    kwarg_keys = set(pattern.pattern.regex.groupindex.keys())
    if "pk" in kwarg_keys:
        # tokenize path and try to map against app names for correct model to use?
        # ie /assessment/1 should recognize "assessment" and use an assessment pk
        # check for slug? and get that from model instance
        # maybe default model instance to urlresolver name, ie for assessment detail
        kwarg_keys.remove("pk")
        kwargs["pk"] = 1
    if kwarg_keys:
        # cannot smartly handle any other kwargs: maybe we can handle something like
        # reference_pk or something if thats a use case?
        my_list.append(pattern.name)
        return None
    return kwargs


def _test_response(response):
    assert response.status_code in [200, 302, 403, 405, 404, 400, 429, 401]


def _test_pattern(pattern, pattern_params, request):
    if isinstance(pattern, URLPattern):
        if pattern.name not in PASS_PATTERNS:
            kwargs = pattern_params.get(pattern.name, _smart_pattern_kwargs(pattern))
            try:
                if kwargs is None:
                    raise PermissionDenied
                response = pattern.callback(request, **kwargs)
                _test_response(response)
            except (PermissionDenied, Http404):
                assert True
    elif isinstance(pattern, URLResolver):
        for _pattern in pattern.url_patterns:
            _test_pattern(_pattern, pattern_params, request)
    else:
        assert False


@pytest.mark.django_db
def test_urls(pattern_params):
    # maybe use Client instead? to automatically include middleware
    # only downside is we would need to create a path
    # using the pattern regex
    factory = RequestFactory()
    request = factory.get("/")
    user = HAWCUser.objects.get(email="admin@hawcproject.org")
    request.user = user
    middleware = SessionMiddleware()
    middleware.process_request(request)
    request.session.save()
    mw = MessageMiddleware()
    mw.process_request(request)

    for pattern in urlpatterns:
        _test_pattern(pattern, pattern_params, request)
    if my_list:
        raise Exception(my_list)
