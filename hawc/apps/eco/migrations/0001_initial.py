# Generated by Django 3.2.5 on 2021-09-08 16:50

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('epi', '0018_django31'),
        ('study', '0011_auto_20190416_2035'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cause',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.IntegerField(choices=[(0, 'TBD'), (1, 'Water Quality')], verbose_name='Cause term')),
                ('measure', models.IntegerField(choices=[(0, 'TBD'), (1, 'Nutrients')], verbose_name='Cause measure')),
                ('measure_detail', models.TextField(blank=True, verbose_name='Cause measure detail')),
                ('units', models.CharField(help_text='Type the unit associated with the cause term', max_length=100, verbose_name='Cause units')),
                ('bio_org', models.CharField(blank=True, choices=[(0, 'Ecosystem'), (1, 'Community'), (2, 'Population'), (3, 'Individual organism'), (4, 'Sub-organismal')], help_text='Select the level of biological organization associated with the cause, if applicable', max_length=100, verbose_name='Level of biological organization')),
                ('species', models.CharField(blank=True, help_text='Type the species name, if applicable; use the format Common name (Latin binomial)', max_length=100, verbose_name='Cause species')),
                ('trajectory', models.IntegerField(choices=[(0, 'Increase'), (1, 'Decrease'), (2, 'Change'), (3, 'Other')], help_text='Select qualitative description of how the cause measure changes, if applicable', verbose_name='Cause trajectory')),
                ('comment', models.TextField(blank=True, help_text='Type any other useful information not captured in other fields', verbose_name='Cause comment')),
                ('as_reported', models.TextField(help_text='Copy and paste 1-2 sentences from article', verbose_name='Cause as reported')),
                ('study_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='study.study')),
            ],
            options={
                'verbose_name': 'Cause/Treatment',
            },
        ),
        migrations.CreateModel(
            name='Climate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'verbose_name': 'Climate',
            },
        ),
        migrations.CreateModel(
            name='Ecoregion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, verbose_name='Ecoregion')),
            ],
            options={
                'verbose_name': 'Ecoregion',
            },
        ),
        migrations.CreateModel(
            name='Effect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.IntegerField(choices=[(0, 'TBD'), (1, 'Algae')], verbose_name='Effect term')),
                ('measure', models.IntegerField(choices=[(0, 'TBD'), (1, 'Abundance')], verbose_name='Effect measure')),
                ('measure_detail', models.CharField(blank=True, max_length=100, verbose_name='Effect measure detail')),
                ('units', models.CharField(help_text='Type the unit associated with the effect term', max_length=100, verbose_name='Effect units')),
                ('bio_org', models.CharField(blank=True, choices=[(0, 'Ecosystem'), (1, 'Community'), (2, 'Population'), (3, 'Individual organism'), (4, 'Sub-organismal')], help_text='Select the level of biological organization associated with the cause, if applicable', max_length=100, verbose_name='Level of biological organization')),
                ('species', models.CharField(blank=True, help_text='Type the species name, if applicable; use the format Common name (Latin binomial)', max_length=100, verbose_name='Effect species')),
                ('trajectory', models.IntegerField(choices=[(0, 'Increase'), (1, 'Decrease'), (2, 'Change'), (3, 'No change'), (4, 'Other')], help_text='Select qualitative description of how the effect measure changes in response to the cause trajectory, if applicable', verbose_name='Effect trajectory')),
                ('comment', models.TextField(blank=True, help_text='Type any other useful information not captured in other fields', verbose_name='Effect comment')),
                ('as_reported', models.TextField(help_text='Copy and paste 1-2 sentences from article', verbose_name='Effect as reported')),
                ('modifying_factors', models.CharField(help_text='Type one or more factors that affect the relationship between the cause and effect', max_length=100, verbose_name='Modifying factors')),
                ('sort', models.IntegerField(blank=True, choices=[(0, 'TBD')], help_text='how do you want to sort multiple quantitative responses?', verbose_name='Sort quantitative responses')),
                ('cause', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='eco.cause')),
            ],
            options={
                'verbose_name': 'Effect/Response',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=2)),
                ('name', models.CharField(blank=True, max_length=64, unique=True)),
            ],
            options={
                'verbose_name': 'State',
            },
        ),
        migrations.CreateModel(
            name='Vocab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(blank=True, max_length=100)),
                ('value', models.CharField(blank=True, max_length=100)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='eco.vocab')),
            ],
            options={
                'verbose_name': 'Vocab',
            },
        ),
        migrations.CreateModel(
            name='Quantitative',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cause_level', models.CharField(blank=True, help_text='Type the specific treatment/exposure/dose level of the cause measure', max_length=100, verbose_name='Cause treatment level')),
                ('cause_level_value', models.FloatField(blank=True, help_text='Type the numeric value of the specific treatment/exposure/dose level of the cause measure', null=True, verbose_name='Cause treatment level value')),
                ('cause_level_units', models.CharField(blank=True, help_text='Enter the units of the specific treatment/exposure/dose level of the cause measure', max_length=100, verbose_name='Cause treatment level units')),
                ('sample_size', models.IntegerField(blank=True, help_text='Type the number of samples used to calculate the response measure value, if known', null=True, verbose_name='Sample size')),
                ('measure_type_filter', models.IntegerField(blank=True, choices=[(0, 'Correlation coefficient'), (1, 'R-squared'), (2, 'Mean difference'), (3, 'ANOVA/PERMANOVA'), (4, 'Ratio'), (5, 'Slope coefficient (beta)'), (6, 'Ordination'), (7, 'Threshold')], help_text='This drop down will filter the following field', verbose_name='Response measure type (filter)')),
                ('measure_type', models.IntegerField(blank=True, choices=[(0, 'Pearson'), (1, 'Spearman'), (2, 'Simple Linear'), (3, 'Partial'), (4, 'Multiple'), (5, 'Quantile'), (6, 'Response ratio'), (7, 'Odds ratio'), (8, 'Risk ratio'), (9, 'Hazard ratio'), (10, 'Non-standardized'), (11, 'Standardized'), (12, 'Non-transformed data'), (13, 'Transformed data'), (14, 'Canonical correspondence analysis (CCA)'), (15, 'Principal components analysis (PCA)'), (16, 'Multiple discriminant analysis (MDA)'), (17, 'Non-multidimensional scaling (NMDS)'), (18, 'Factor analysis'), (19, 'Regression tree'), (20, 'Random forest'), (21, 'Breakpoint (piecewise) regression'), (22, 'Quantile regression'), (23, 'Cumulative frequency distribution'), (24, 'Gradient forest analysis'), (25, 'Non-linear curve fitting'), (26, 'Ordination'), (27, 'TITAN'), (28, 'Not specified')], help_text='Select one response measure type', verbose_name='Response measure type')),
                ('measure_value', models.FloatField(blank=True, help_text='Type the numerical value of the response measure', null=True, verbose_name='Response measure value')),
                ('description', models.TextField(blank=True, help_text='Type any other useful information not captured in other fields', verbose_name='Response measure description')),
                ('variability', models.IntegerField(blank=True, choices=[(0, '95% CI'), (1, '90% CI'), (2, 'Standard deviation'), (3, 'Standard error'), (4, 'Not applicable')], help_text='Select how variability in the response measure was reported, if applicable', verbose_name='Response variability')),
                ('low_variability', models.FloatField(blank=True, help_text='Type the lower numerical bound of the response variability', null=True, verbose_name='Lower response variability measure')),
                ('upper_variability', models.FloatField(blank=True, help_text='Type the upper numerical bound of the response variability', null=True, verbose_name='Upper response variability measure')),
                ('statistical_sig_type', models.IntegerField(blank=True, choices=[(0, 'P-value'), (1, 'F statistic'), (2, 'Chi square'), (3, 'Not applicable')], help_text='Select the type of statistical significance measure reported', verbose_name='Statistical significance measure type')),
                ('statistical_sig_value', models.FloatField(blank=True, help_text='Type the numerical value of the statistical significance', null=True, verbose_name='Statistical significance measure value')),
                ('derived_value', models.FloatField(blank=True, help_text="Calculation from 'response measure value' based on a formula linked to 'response measure type', if applicable", null=True, verbose_name='Derived response measure value')),
                ('effect', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eco.effect')),
            ],
            options={
                'verbose_name': 'Quantitative response information',
            },
        ),
        migrations.CreateModel(
            name='Metadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('study_type', models.IntegerField(choices=[(0, 'Observational/gradient'), (1, 'Manipulation/experiment'), (2, 'Simulation'), (3, 'Meta-analysis'), (4, 'Review')], help_text='Select the type of study')),
                ('study_setting', models.IntegerField(choices=[(0, 'Field'), (1, 'Mesocosm'), (2, 'Greenhouse'), (3, 'Laboratory'), (4, 'Model'), (5, 'Not Applicable')], help_text='Select the setting in which evidence was generated')),
                ('habitat', models.IntegerField(blank=True, choices=[(0, 'Terrestrial'), (1, 'Riparian'), (2, 'Freshwater aquatic'), (3, 'Estuarine'), (4, 'Marine')], help_text='Select the habitat to which the evidence applies', verbose_name='Habitat')),
                ('habitat_terrestrial', models.IntegerField(blank=True, choices=[(0, 'Forest'), (1, 'Grassland'), (2, 'Desert'), (3, 'Heathland'), (4, 'Agricultural'), (5, 'Urban/suburban'), (6, 'Tundra')], help_text='If you selected terrestrial, pick the type of terrestrial habitat', verbose_name='Terrestrial habitat')),
                ('habitat_aquatic_freshwater', models.IntegerField(blank=True, choices=[(0, 'Stream/river'), (1, 'Wetland'), (2, 'Lake/reservoir'), (3, 'Artificial')], help_text='If you selected freshwater, pick the type of freshwater habitat', verbose_name='Freshwater habitat')),
                ('habitat_as_reported', models.TextField(blank=True, help_text='Copy and paste 1-2 sentences from article', verbose_name='Habitat as reported')),
                ('climate_as_reported', models.TextField(blank=True, help_text='Copy and paste from article', verbose_name='Climate as reported')),
                ('climate', models.ManyToManyField(blank=True, help_text='Select one or more climates to which the evidence applies', to='eco.Climate')),
                ('country', models.ManyToManyField(help_text='Select one or more countries', to='epi.Country')),
                ('ecoregion', models.ManyToManyField(blank=True, help_text='Select one or more Level III Ecoregions, if known', to='eco.Ecoregion')),
                ('state', models.ManyToManyField(blank=True, help_text='Select one or more states, if applicable.', to='eco.State')),
                ('study_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='study.study')),
            ],
            options={
                'verbose_name': 'Metadata',
            },
        ),
    ]
