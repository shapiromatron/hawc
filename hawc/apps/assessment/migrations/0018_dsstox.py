# Generated by Django 2.2.11 on 2020-08-12 14:15

import django.contrib.postgres.fields.jsonb
import requests
from django.db import migrations, models


def casrn_to_dtxsid(apps, schema_editor):

    Assessment = apps.get_model("assessment", "assessment")
    DSSTox = apps.get_model("assessment", "dsstox")

    def _create_dsstox(identifier):
        # return an instance of dsstox or None if its not found
        url = f"https://actorws.epa.gov/actorws/chemIdentifier/v01/resolve.json?identifier={identifier}"
        response = requests.get(url)
        response_dict = response.json()["DataRow"]
        if not response_dict["dtxsid"]:
            return None
        else:
            return DSSTox(dtxsid=response_dict["dtxsid"], content=response_dict)

    # we're only looking at assessments with non-empty chemical identifiers
    assessments = Assessment.objects.exclude(cas="")

    # lists to keep track of changed data for bulk creates/updates
    existing_dtxsids = list(DSSTox.objects.all().values_list("dtxsid", flat=True))
    m2m_entries = list()
    dsstox_entries = list()

    for assessment in assessments:
        dsstox = _create_dsstox(assessment.cas)
        # if there is an associated DTXSID...
        if dsstox:
            # add it to assessment
            m2m_entry = assessment.dtxsids.through(
                assessment_id=assessment.id, dsstox_id=dsstox.dtxsid
            )
            # mark the assessment as changed
            m2m_entries.append(m2m_entry)
            # and create the dsstox entry if it doesn't exist
            if dsstox.dtxsid not in existing_dtxsids:
                dsstox_entries.append(dsstox)
                existing_dtxsids.append(dsstox.dtxsid)

    # create new dsstox entries
    DSSTox.objects.bulk_create(dsstox_entries)
    # create M2M intermediary table entries
    Assessment.dtxsids.through.objects.bulk_create(m2m_entries)


class Migration(migrations.Migration):

    dependencies = [
        ("assessment", "0017_dataset"),
    ]

    operations = [
        migrations.CreateModel(
            name="DSSTox",
            fields=[
                (
                    "dtxsid",
                    models.CharField(
                        max_length=80,
                        primary_key=True,
                        serialize=False,
                        verbose_name="DSSTox substance identifier (DTXSID)",
                    ),
                ),
                ("content", django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "DSSTox substance",
                "verbose_name_plural": "DSSTox substances",
                "ordering": ("dtxsid",),
            },
        ),
        migrations.AddField(
            model_name="assessment",
            name="dtxsids",
            field=models.ManyToManyField(
                blank=True,
                related_name="assessments",
                to="assessment.DSSTox",
                verbose_name="DSSTox substance identifiers (DTXSID)",
                help_text="""
        Related <a href="https://www.epa.gov/chemical-research/distributed-structure-searchable-toxicity-dsstox-database">DSSTox</a>
        substance identifiers for this assessment.
        """,
            ),
        ),
        migrations.RunPython(casrn_to_dtxsid, migrations.RunPython.noop),
    ]
