# Generated by Django 4.2.3 on 2023-08-21 03:49
import json
import logging

from django.db import migrations, models

from hawc.apps.summary.prefilters import EndpointPrefilter, get_prefilter_cls

logger = logging.getLogger(__name__)

mapping = {
    EndpointPrefilter.BIOASSAY.value: {
        "published_only": "animal_group__experiment__study__published",
        "studies": "animal_group__experiment__study__in",
        "systems": "system__in",
        "organs": "organ__in",
        "effects": "effect__in",
        "effect_subtypes": "effect_subtype__in",
        "effect_tags": "effects__in",
    },
    EndpointPrefilter.EPIV1.value: {
        "published_only": "study_population__study__published",
        "studies": "study_population__study__in",
        "systems": "system__in",
        "effects": "effect__in",
        "effect_tags": "effects__in",
    },
    EndpointPrefilter.EPIV2.value: {
        "published_only": "design__study__published",
        "studies": "design__study__in",
    },
    EndpointPrefilter.EPI_META.value: {
        "published_only": "protocol__study__published",
        "studies": "protocol__study__in",
    },
    EndpointPrefilter.IN_VITRO.value: {
        "published_only": "experiment__study__published",
        "studies": "experiment__study__in",
        "categories": "category__in",
        "chemicals": "chemical__name__in",
        "effects": "effect__in",
        "effect_tags": "effects__in",
    },
    EndpointPrefilter.ECO.value: {
        "published_only": "design__study__published",
        "studies": "design__study__in",
    },
}


def prefilters_dict(apps, schema_editor):
    # load prefilters textfield into temp jsonfield
    DataPivotQuery = apps.get_model("summary", "DataPivotQuery")
    objs = DataPivotQuery.objects.all().select_related("assessment").order_by("id")
    for obj in objs:
        data = json.loads(obj.prefilters)
        if not data:
            continue
        key_map = mapping[get_prefilter_cls(None, obj.evidence_type, obj.assessment)]
        key_map = {v: k for k, v in key_map.items()}
        data = {key_map[k]: v for k, v in data.items() if v}
        obj.temp = data
    DataPivotQuery.objects.bulk_update(objs, ["temp"])


def reverse_prefilters_dict(apps, schema_editor):
    # dump temp jsonfield into prefilters textfield
    DataPivotQuery = apps.get_model("summary", "DataPivotQuery")
    objs = DataPivotQuery.objects.all().select_related("assessment")
    for obj in objs:
        if not obj.temp:
            continue
        key_map = mapping[get_prefilter_cls(None, obj.evidence_type, obj.assessment)]
        data = {key_map[k]: v for k, v in obj.temp.items()}
        obj.prefilters = json.dumps(data)
    DataPivotQuery.objects.bulk_update(objs, ["prefilters"])


class Migration(migrations.Migration):
    dependencies = [
        ("summary", "0044_dp_fields"),
    ]

    operations = [
        # change prefilters textfield into jsonfield
        migrations.AddField(
            model_name="datapivotquery",
            name="temp",
            field=models.JSONField(default=dict),
        ),
        migrations.RunPython(prefilters_dict, reverse_code=reverse_prefilters_dict),
        migrations.RemoveField(
            model_name="datapivotquery",
            name="prefilters",
        ),
        migrations.RenameField(
            model_name="datapivotquery",
            old_name="temp",
            new_name="prefilters",
        ),
    ]
