# Generated by Django 5.1 on 2024-09-23 20:31

from io import BytesIO
from pathlib import Path

import pandas as pd
from django.core.files.base import ContentFile
from django.db import migrations

from hawc.apps.summary.constants import VisualType


def create_dataset(
    apps,
    assessment_id: int,
    name: str,
    description: str,
    data: BytesIO,
    df: pd.DataFrame,
    data_name: str,
    published: bool = True,
    excel_worksheet_name: str = "",
    notes: str = "",
):
    Dataset = apps.get_model("assessment", "Dataset")
    DatasetRevision = apps.get_model("assessment", "DatasetRevision")
    dataset = Dataset.objects.create(
        assessment_id=assessment_id,
        name=name,
        description=description,
        published=published,
    )
    DatasetRevision.objects.create(
        dataset=dataset,
        version=1,
        data=ContentFile(data.getvalue(), name=data_name),
        excel_worksheet_name=excel_worksheet_name,
        metadata=DatasetRevision.Metadata(
            filename=data_name,
            extension=".xlsx",
            num_rows=df.shape[0],
            num_columns=df.shape[1],
            column_names=df.columns.tolist(),
        ).model_dump(),
        notes=notes,
    )
    return dataset


def forward(apps, schema_editor):
    Visual = apps.get_model("summary", "Visual")
    DataPivotQuery = apps.get_model("summary", "DataPivotQuery")
    DataPivotUpload = apps.get_model("summary", "DataPivotUpload")

    for dp in DataPivotQuery.objects.all():
        visualization = Visual(
            title=dp.title,
            slug=dp.slug,
            assessment=dp.assessment,
            visual_type=VisualType.DATA_PIVOT_QUERY,
            settings=dp.settings,
            caption=dp.caption,
            published=dp.published,
            prefilters={
                "evidence_type": dp.evidence_type,
                "export_style": dp.export_style,
                "preferred_units": dp.preferred_units,
                "prefilters": dp.prefilters,
            },
            legacy_id=dp.id,
            created=dp.created,
            last_updated=dp.last_updated,
        )
        visualization.save()
        visualization.labels.set(dp.label)

    for dp in DataPivotUpload.objects.all():
        worksheet_name = dp.worksheet_name or 0
        df = pd.read_excel(dp.excel_file.file, sheet_name=worksheet_name)
        dataset = create_dataset(
            apps,
            assessment_id=dp.assessment_id,
            name=dp.title,
            description=dp.caption,
            data=BytesIO(dp.excel_file.file.read()),
            df=df,
            data_name=Path(dp.excel_file.name).name,
            published=True,
            excel_worksheet_name=dp.worksheet_name,
            notes="",
        )
        visualization = Visual(
            title=dp.title,
            slug=dp.slug,
            assessment=dp.assessment,
            visual_type=VisualType.DATA_PIVOT_FILE,
            settings=dp.settings,
            caption=dp.caption,
            published=dp.published,
            dataset=dataset,
            prefilters={},
            legacy_id=dp.id,
            created=dp.created,
            last_updated=dp.last_updated,
        )
        visualization.save()
        visualization.labels.set(dp.label)


def backward(apps, schema_editor):
    Dataset = apps.get_model("summary", "Visual")
    Visual = apps.get_model("summary", "Visual")
    Dataset.objects_filter(
        id__in=Visual.objects.filter(visual_type=VisualType.DATA_PIVOT_FILE).values_list(
            "dataset_id", flat=True
        )
    ).delete()
    Visual.objects.filter(
        visual_type__in=[VisualType.DATA_PIVOT_QUERY, VisualType.DATA_PIVOT_FILE]
    ).delete()


class Migration(migrations.Migration):
    dependencies = [("summary", "0058_visual_dataset_visual_legacy_id_and_more")]
    operations = [migrations.RunPython(forward, reverse_code=backward)]
