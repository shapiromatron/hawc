[project]
name = "hawc"
license = {file = "LICENSE"}
authors = [{name = "Andy Shapiro", email = "shapiromatron@gmail.com"}]
readme = "README.md"
dynamic = ["version", "description"]
keywords = [
  "data visualization",
  "epidemiology",
  "risk assessment",
  "systematic review",
  "toxicology",
]
classifiers = [
  "Intended Audience :: Science/Research",
  "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.13"
# see https://peps.python.org/pep-0440/#version-specifiers
dependencies = [
  # web application
  "Django~=5.2.1",
  "django-crispy-forms==2.4",
  "crispy-bootstrap4==2024.10",
  "django-filter==24.3",
  "django-redis==5.4.0",
  "django-reversion==5.1.0",
  "django-autocomplete-light==3.12.1",
  "django-taggit==6.1.0",
  "django-treebeard==4.7.1",
  "djangorestframework==3.16.0",
  "django-vite==3.1.0",
  "uritemplate==4.1.1",
  "inflection==0.5.1",
  "pyyaml==6.0.2",
  "gunicorn==23.0.0",
  "wagtail~=7.0.0",
  "wagtail-draftail-anchors==0.6.0",
  # tasks
  "celery==5.5.2",
  "billiard==4.2.1",
  "kombu==5.5.3",
  # utilities
  "jsonschema==4.24.0",
  "lxml~=5.4.0",
  "psycopg2-binary==2.9.10",
  "redis==6.2.0",
  "requests==2.32.4",
  "pydantic~=2.11.5",
  "nh3~=0.2.21",
  "tinycss2==1.4.0",
  # computational
  "numpy~=2.2.6",
  "pandas==2.2.3",
  "openpyxl==3.1.5",
  "jinja2~=3.1.6",
  "plotly==6.1.2",
  "scipy~=1.15.3",
  "pybmds==24.1",
  # exports
  "rispy==0.10.0",
  "python-docx==1.1.2",
]

[project.optional-dependencies]
dev = [
  # build
  "flit==3.12.0",  # make sure to sync w/ [build-system]
  "poethepoet~=0.34.0",
  # lint and formatting tools
  "ruff==0.11.11",  # make sure to sync w/ pre-commit
  "djhtml==3.0.8",  # make sure to sync w/ pre-commit
  "pre-commit==4.2.0",
  # django development
  "django-debug-toolbar~=5.2.0",
  "django-browser-reload~=1.18.0",
  "django-extensions~=4.1",
  # tests
  "coverage~=7.8.2",
  "pytest~=8.3.5",
  "pytest-django~=4.11.1",
  "vcrpy==7.0.0",
  "pytest-recording==0.13.4",
  "playwright~=1.52.0",
  "pytest-playwright~=0.7.0",
]
docs = [
  "mkdocs-material~=9.6.14",
]
prod = [
  "django-anymail==13.0",
  "sentry_sdk~=2.29.1",
]

[project.scripts]
manage = "hawc:manage"
"manage.py" = "hawc:manage"

[project.urls]
Documentation = "https://hawc.readthedocs.io/"
Source = "https://github.com/shapiromatron/hawc"

# --- --- --- --- --- --- --- --- --- --- BUILD --- --- --- --- --- --- --- --- --- ---
[build-system]
requires = ["flit_core~=3.12"]
build-backend = "flit_core.buildapi"

[tool.flit.sdist]
include = [
  "hawc/static/bundles/**/*",
  "hawc/gitcommit.json",
]
exclude = [
  ".github",
  "bin",
  "client",
  "compose",
  "docs",
  "frontend",
  "scripts",
  "tests",
  "vendor",
]

# --- --- --- --- --- --- --- --- --- --- FORMAT --- --- --- --- --- --- --- --- --- ---
[tool.ruff]
line-length = 100
target-version = "py313"
lint.select = ["F", "E", "W", "I", "UP", "S", "B", "T20", "RUF"]
lint.ignore = ["E501", "S308", "S314", "S603", "RUF012", "RUF015"]
lint.unfixable = ["F401", "F841"]

[tool.ruff.lint.isort]
known-first-party = ["hawc", "hawc_client"]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["S101", "S106"]
"scripts/*.py" = ["T201"]
"scripts/*.ipynb" = ["T201"]
"**/management/**.py" = ["T201"]
"**/migrations/**.py" = ["T201"]

# --- --- --- --- --- --- --- --- --- --- TEST --- --- --- --- --- --- --- --- --- ---
[tool.pytest.ini_options]
addopts = "--ds=hawc.main.settings.unittest --record-mode=once --reuse-db --nomigrations"
testpaths = [
  "tests/hawc",
  "tests/integration",
  "tests/client",
]

[tool.coverage.run]
omit = [
  "*migrations*",
  "./build/",
  "./client/hawc_client/interactive.py",
  "./hawc/apps/*/management/*",
  "./hawc/main/*",
  "./scripts/private/*",
  "./tests/*",
  "./venv/*",
]

[tool.coverage.report]
fail_under=92.0
precision=1

# --- --- --- --- --- --- --- --- --- --- TASKS --- --- --- --- --- --- --- --- --- ---
[tool.poe.tasks.sync-dev]
help = "Sync dev environment after code checkout"
sequence = [
  {cmd = 'uv pip install -e ".[dev,docs]"'},
  {cmd = "uv pip install -e client"},
  {cmd = "yarn --cwd frontend"},
  {cmd = "python manage.py migrate"},
  {cmd = "python manage.py recreate_views"},
]

[tool.poe.tasks.run-py]
help = "Run python developer environment"
cmd = "python manage.py runserver"

[tool.poe.tasks.run-js]
help = "Run javascript developer environment"
cmd = "npm --prefix ./frontend run start"

[tool.poe.tasks.test]
help = "Run python tests"
cmd = "py.test"

[tool.poe.tasks.test-integration]
help = "Run integration tests (requires `npm run start`)"
sequence = [
  {cmd = "playwright install --with-deps chromium"},
  {shell = "INTEGRATION_TESTS=1 py.test -sv tests/integration/"},
]

[tool.poe.tasks.test-integration-debug]
help = "Run integration tests in debug mode (requires `npm run start`)"
sequence = [
  {cmd = "playwright install --with-deps chromium"},
  {shell = "INTEGRATION_TESTS=1 PWDEBUG=1 py.test -sv tests/integration/"},
]

[tool.poe.tasks.test-js]
help = "Run javascript tests"
cmd = "npm --prefix ./frontend run test"

[tool.poe.tasks.format]
help = "Fix formatting issues where possible"
sequence = ["format-py", "format-js", "format-html"]

[tool.poe.tasks.format-py]
help = "Fix python formatting issues where possible"
sequence = [
  {cmd = "ruff format ."},
  {cmd = "ruff check . --fix --show-fixes"},
]

[tool.poe.tasks.format-js]
help = "Fix javascript formatting issues where possible"
cmd = "npm --prefix ./frontend run format"

[tool.poe.tasks.format-html]
help = "Fix HTML formatting issues where possible"
cmd = "djhtml --tabwidth 2 hawc/"

[tool.poe.tasks.lint]
help = "Check formatting issues"
sequence = ["lint-py", "lint-js", "lint-html"]

[tool.poe.tasks.lint-py]
help = "Check python formatting issues"
sequence = [
  {cmd = "ruff format . --check"},
  {cmd = "ruff check ."},
]

[tool.poe.tasks.lint-js]
help = "Check javascript formatting issues"
cmd = "npm --prefix ./frontend run lint"

[tool.poe.tasks.lint-html]
help = "Check HTML formatting issues where possible"
cmd = "djhtml --tabwidth 2 --check hawc/"

[tool.poe.tasks.build]
help = "Build package"
sequence = [
  {cmd = "npm --prefix ./frontend run build"},
  {cmd = "python manage.py set_git_commit"},
  {cmd = "uv build"},
]

[tool.poe.tasks.coverage]
help = "Run python coverage and create HTML report"
sequence = [
  {cmd = "coverage run -m pytest"},
  {cmd = "coverage html -d coverage_html -i"},
]

[tool.poe.tasks.loc]
help = "Generate lines of code report"
cmd = """cloc \
		--exclude-dir=migrations,node_modules,public,private,vendor,venv \
		--exclude-ext=json,yaml,svg,toml,ini \
		--vcs=git \
		--counted loc-files.txt \
		--md \
		.
"""

[tool.poe.tasks.docs]
help = "Build documentation"
cwd = "docs"
cmd = "mkdocs build --strict"

[tool.poe.tasks.docs-serve]
help = "Run documentation server"
cwd = "docs"
cmd = "mkdocs serve -a localhost:8010"
